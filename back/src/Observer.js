/*
	Класс позволяет реагировать на изменения: подписываться на них
	и обрабатывать их.
	Экземпляры класса имеют возможность объявлять о своём изменении.
	На экземпляры класса можно подписаться с помощью метода subscribe.
*/
module.exports = class Observer {
	// Коллекция обозревателей (функций).
	watchers = new Set()

	/*
		Метод подписывается на изменение. Принимает обозреватель (функцию).
		Возвращает функцию, которая отвязывается от прослушки событий.
	*/
	subscribe (watcher) {
		// Добавить переданный обозреватель в коллекцию обозревателей.
		this.watchers.add(watcher)

		// Функция, которая отвязывается от прослушки событий.
		return () => this.watchers.delete.watcher
	}

	// Метод распространяет влияние, событие, изменение.
	dispatch (...args) {
		// Пройти по всем обозревателям и вызвать их с переданными аргументами.
		for (const watcher of this.watchers) {
			watcher(...args)
		}
	}
}